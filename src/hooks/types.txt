declare namespace OneKeyConnect {
    /**
     * Set OneKeyConnect manifest.
     */
    function manifest(params: P.Manifest): void;
    /**
     * Initializes OneKeyConnect.
     * `manifest` is required
     */
    function init(settings: { manifest: P.Manifest } & Partial<P.ConnectSettings>): Promise<void>;
    /**
     * Retrieves the settings that OneKeyConnect was initialized with.
     */
    function getSettings(): P.Response<P.ConnectSettings>;
    function dispose(): void;
    function cancel(params?: string): void;
    function renderWebUSBButton(): void;
    function disableWebUSB(): void;
    /**
     * Event listeners
     */
    function on(type: typeof CONSTANTS.DEVICE_EVENT, cb: (event: Device.DeviceEvent & { event: typeof CONSTANTS.DEVICE_EVENT }) => void): void;
    function on(type: typeof CONSTANTS.TRANSPORT_EVENT, cb: (event: Events.TransportEvent & { event: typeof CONSTANTS.TRANSPORT_EVENT }) => void): void;
    function on(type: typeof CONSTANTS.UI_EVENT, cb: (event: Events.UiEvent & { event: typeof CONSTANTS.UI_EVENT }) => void): void;
    function on(type: typeof CONSTANTS.BLOCKCHAIN_EVENT, cb: (event: Blockchain.BlockchainEvent & { event: typeof CONSTANTS.BLOCKCHAIN_EVENT }) => void): void;
    function on(type: Events.MessageWithoutPayload['type'], cb: () => void): void;
    function on(type: Events.DeviceMessage['type'], cb: (event: Events.DeviceMessage['payload']) => void): void;
    function on(type: Events.ButtonRequestMessage['type'], cb: (event: Events.ButtonRequestMessage['payload']) => void): void;
    function on(type: Events.AddressValidationMessage['type'], cb: (event: Events.AddressValidationMessage['payload']) => void): void;
    function on(type: Events.RequestPermission['type'], cb: (event: Events.RequestPermission['payload']) => void): void;
    function on(type: Events.RequestConfirmation['type'], cb: (event: Events.RequestConfirmation['payload']) => void): void;
    function on(type: Events.UnexpectedDeviceMode['type'], cb: (event: Events.UnexpectedDeviceMode['payload']) => void): void;
    function on(type: Events.FirmwareException['type'], cb: (event: Events.FirmwareException['payload']) => void): void;
    function on<R>(type: typeof CONSTANTS.UI.BUNDLE_PROGRESS, cb: (event: Events.BundleProgress<R>['payload']) => void): void;
    function on(type: Events.FirmwareProgress['type'], cb: (event: Events.FirmwareProgress['payload']) => void): void;
    function on(type: Events.CustomMessageRequest['type'], cb: (event: Events.CustomMessageRequest['payload']) => void): void;
    function off(type: string, cb: any): void;
    function removeAllListeners(): void;
    function uiResponse(response: Events.UiResponse): void;
    /**
     * Backend operations
     */
    function blockchainEstimateFee(
        params: P.CommonParams & Blockchain.BlockchainEstimateFee,
    ): P.Response<Blockchain.BlockchainEstimatedFee>;
    function blockchainGetAccountBalanceHistory(
        params: Blockchain.BlockchainGetAccountBalanceHistory
    ): P.Response<Blockchain.BlockchainAccountBalanceHistory[]>;
    function blockchainGetCurrentFiatRates(
        params: Blockchain.BlockchainGetCurrentFiatRates
    ): P.Response<Blockchain.BlockchainTimestampedFiatRates>;
    function blockchainGetFiatRatesForTimestamps(
        params: Blockchain.BlockchainGetFiatRatesForTimestamps
    ): P.Response<Blockchain.BlockchainFiatRatesForTimestamps>;
    function blockchainGetTransactions(
        params: P.CommonParams & Blockchain.BlockchainGetTransactions,
    ): P.Response<Blockchain.BlockchainTransactions>;
    function blockchainSetCustomBackend(
        params: P.CommonParams & Blockchain.BlockchainSetCustomBackend,
    ): P.Response<boolean>;
    function blockchainSubscribe(
        params: P.CommonParams & Blockchain.BlockchainSubscribe,
    ): P.Response<Blockchain.BlockchainSubscribed>;
    function blockchainSubscribeFiatRates(
        params: Blockchain.BlockchainSubscribeFiatRates
    ): P.Response<Blockchain.BlockchainSubscribed>;
    function blockchainUnsubscribe(
        params: P.CommonParams & Blockchain.BlockchainSubscribe,
    ): P.Response<Blockchain.BlockchainSubscribed>;
    function blockchainUnsubscribeFiatRates(
        params: Blockchain.BlockchainSubscribeFiatRates
    ): P.Response<Blockchain.BlockchainSubscribed>;
    function blockchainDisconnect(
        params: P.CommonParams & Blockchain.BlockchainDisconnect,
    ): P.Response<Blockchain.BlockchainDisconnected>;
    /**
     * Bitcoin and Bitcoin-like
     * Display requested address derived by given BIP32 path on device and
     * returns it to caller. User is asked to confirm the export on Trezor.
     */
    function getAddress(params: P.CommonParams & Bitcoin.GetAddress): P.Response<Bitcoin.Address>;
    function getAddress(params: P.CommonParams & P.Bundle<Bitcoin.GetAddress>): P.BundledResponse<Bitcoin.Address>;
    /**
     * Bitcoin and Bitcoin-like
     * Retrieves BIP32 extended public derived by given BIP32 path.
     * User is presented with a description of the requested key and asked to
     * confirm the export.
     */
    function getPublicKey(params: P.CommonParams & Bitcoin.GetPublicKey): P.Response<Bitcoin.HDNodeResponse>;
    function getPublicKey(
        params: P.CommonParams & P.Bundle<Bitcoin.GetPublicKey>,
    ): P.BundledResponse<Bitcoin.HDNodeResponse>;
    /**
     * Bitcoin and Bitcoin-like
     * Asks device to sign given inputs and outputs of pre-composed transaction.
     * User is asked to confirm all transaction details on Trezor.
     */
    function signTransaction(params: P.CommonParams & Bitcoin.SignTransaction): P.Response<Bitcoin.SignedTransaction>;
    /**
     * Bitcoin, Bitcoin-like, Ethereum-like, Ripple
     * Broadcasts the transaction to the selected network.
     */
    function pushTransaction(params: P.CommonParams & Bitcoin.PushTransaction): P.Response<Bitcoin.PushedTransaction>;
    /**
     * Bitcoin and Bitcoin-like
     * Requests a payment from the users wallet to a set of given outputs.
     * Internally a BIP-0044 account discovery is performed and user is presented
     * with a list of accounts. After account selection user is presented with
     * list of fee selection. After selecting a fee transaction is signed and
     * returned in hexadecimal format. Change output is added automatically, if
     * needed.
     */
    function composeTransaction(params: P.CommonParams & Account.ComposeParams): P.Response<Bitcoin.SignedTransaction>;
    function composeTransaction(
        params: P.CommonParams & Account.PrecomposeParams,
    ): P.Response<Account.PrecomposedTransaction[]>;
    /**
     * Bitcoin, Bitcoin-like, Ethereum-like, Ripple
     * Gets an info of specified account.
     */
    function getAccountInfo(params: P.CommonParams & Account.GetAccountInfo): P.Response<Account.AccountInfo>;
    function getAccountInfo(
        params: P.CommonParams & P.Bundle<Account.GetAccountInfo>,
    ): P.BundledResponse<Account.AccountInfo>;
    /**
     * Bitcoin and Bitcoin-like
     * Asks device to sign a message using the private key derived by given BIP32
     * path.
     */
    function signMessage(params: P.CommonParams & Bitcoin.SignMessage): P.Response<Protobuf.MessageSignature>;
    /**
     * Bitcoin and Bitcoin-like
     * Asks device to verify a message using the signer address and signature.
     */
    function verifyMessage(params: P.CommonParams & Bitcoin.VerifyMessage): P.Response<P.DefaultMessage>;
    // Binance
    function binanceGetAddress(params: P.CommonParams & Binance.BinanceGetAddress): P.Response<Binance.BinanceAddress>;
    function binanceGetAddress(
        params: P.CommonParams & P.Bundle<Binance.BinanceGetAddress>,
    ): P.BundledResponse<Binance.BinanceAddress>;
    function binanceGetPublicKey(
        params: P.CommonParams & Binance.BinanceGetPublicKey,
    ): P.Response<Binance.BinancePublicKey>;
    function binanceGetPublicKey(
        params: P.CommonParams & P.Bundle<Binance.BinanceGetPublicKey>,
    ): P.BundledResponse<Binance.BinancePublicKey>;
    function binanceSignTransaction(
        params: P.CommonParams & Binance.BinanceSignTransaction,
    ): P.Response<Protobuf.BinanceSignedTx>;
    // Cardano (ADA)
    function cardanoGetAddress(params: P.CommonParams & Cardano.CardanoGetAddress): P.Response<Cardano.CardanoAddress>;
    function cardanoGetAddress(
        params: P.CommonParams & P.Bundle<Cardano.CardanoGetAddress>,
    ): P.BundledResponse<Cardano.CardanoAddress>;
    function cardanoGetPublicKey(
        params: P.CommonParams & Cardano.CardanoGetPublicKey,
    ): P.Response<Cardano.CardanoPublicKey>;
    function cardanoGetPublicKey(
        params: P.CommonParams & P.Bundle<Cardano.CardanoGetPublicKey>,
    ): P.BundledResponse<Cardano.CardanoPublicKey>;
    function cardanoSignTransaction(
        params: P.CommonParams & Cardano.CardanoSignTransaction,
    ): P.Response<Cardano.CardanoSignedTx>;
    // EOS
    function eosGetPublicKey(params: P.CommonParams & EOS.EosGetPublicKey): P.Response<EOS.EosPublicKey>;
    function eosGetPublicKey(
        params: P.CommonParams & P.Bundle<EOS.EosGetPublicKey>,
    ): P.BundledResponse<EOS.EosPublicKey>;
    function eosSignTransaction(params: P.CommonParams & EOS.EosSignTransaction): P.Response<Protobuf.EosSignedTx>;
    // Ethereum and Ethereum-like
    function ethereumGetAddress(
        params: P.CommonParams & Ethereum.EthereumGetAddress,
    ): P.Response<Ethereum.EthereumAddress>;
    function ethereumGetAddress(
        params: P.CommonParams & P.Bundle<Ethereum.EthereumGetAddress>,
    ): P.BundledResponse<Ethereum.EthereumAddress>;
    function ethereumGetPublicKey(
        params: P.CommonParams & Ethereum.EthereumGetPublicKey,
    ): P.Response<Bitcoin.HDNodeResponse>;
    function ethereumGetPublicKey(
        params: P.CommonParams & P.Bundle<Ethereum.EthereumGetPublicKey>,
    ): P.BundledResponse<Bitcoin.HDNodeResponse>;
    function ethereumSignTransaction(
        params: P.CommonParams & Ethereum.EthereumSignTransaction,
    ): P.Response<Ethereum.EthereumSignedTx>;
    function ethereumSignTransaction(
        params: P.CommonParams & P.Bundle<Ethereum.EthereumSignTransaction>,
    ): P.BundledResponse<Ethereum.EthereumSignedTx>;
    function ethereumSignMessage(
        params: P.CommonParams & Ethereum.EthereumSignMessage,
    ): P.Response<Protobuf.MessageSignature>;
    function ethereumVerifyMessage(
        params: P.CommonParams & Ethereum.EthereumVerifyMessage,
    ): P.Response<P.DefaultMessage>;
    // Lisk
    function liskGetAddress(params: P.CommonParams & Lisk.LiskGetAddress): P.Response<Lisk.LiskAddress>;
    function liskGetAddress(
        params: P.CommonParams & P.Bundle<Lisk.LiskGetAddress>,
    ): P.BundledResponse<Lisk.LiskAddress>;
    function liskGetPublicKey(params: P.CommonParams & Lisk.LiskGetPublicKey): P.Response<Lisk.LiskPublicKey>;
    function liskGetPublicKey(
        params: P.CommonParams & P.Bundle<Lisk.LiskGetPublicKey>,
    ): P.BundledResponse<Lisk.LiskPublicKey>;
    function liskSignTransaction(params: P.CommonParams & Lisk.LiskSignTransaction): P.Response<Protobuf.LiskSignedTx>;
    function liskSignMessage(params: P.CommonParams & Lisk.LiskSignMessage): P.Response<Lisk.LiskMessageSignature>;
    function liskVerifyMessage(params: P.CommonParams & Lisk.LiskVerifyMessage): P.Response<P.DefaultMessage>;
    // NEM
    function nemGetAddress(params: P.CommonParams & NEM.NEMGetAddress): P.Response<NEM.NEMAddress>;
    function nemGetAddress(params: P.CommonParams & P.Bundle<NEM.NEMGetAddress>): P.BundledResponse<NEM.NEMAddress>;
    function nemSignTransaction(params: P.CommonParams & NEM.NEMSignTransaction): P.Response<Protobuf.NEMSignedTx>;
    // Ripple
    function rippleGetAddress(params: P.CommonParams & Ripple.RippleGetAddress): P.Response<Ripple.RippleAddress>;
    function rippleGetAddress(
        params: P.CommonParams & P.Bundle<Ripple.RippleGetAddress>,
    ): P.BundledResponse<Ripple.RippleAddress>;
    function rippleSignTransaction(
        params: P.CommonParams & Ripple.RippleSignTransaction,
    ): P.Response<Ripple.RippleSignedTx>;
    // Stellar
    function stellarGetAddress(params: P.CommonParams & Stellar.StellarGetAddress): P.Response<Stellar.StellarAddress>;
    function stellarGetAddress(
        params: P.CommonParams & P.Bundle<Stellar.StellarGetAddress>,
    ): P.BundledResponse<Stellar.StellarAddress>;
    function stellarSignTransaction(
        params: P.CommonParams & Stellar.StellarSignTransaction,
    ): P.Response<Stellar.StellarSignedTx>;
    // // Tezos
    function tezosGetAddress(params: P.CommonParams & Tezos.TezosGetAddress): P.Response<Tezos.TezosAddress>;
    function tezosGetAddress(
        params: P.CommonParams & P.Bundle<Tezos.TezosGetAddress>,
    ): P.BundledResponse<Tezos.TezosAddress>;
    function tezosGetPublicKey(params: P.CommonParams & Tezos.TezosGetPublicKey): P.Response<Tezos.TezosPublicKey>;
    function tezosGetPublicKey(
        params: P.CommonParams & P.Bundle<Tezos.TezosGetPublicKey>,
    ): P.BundledResponse<Tezos.TezosPublicKey>;
    function tezosSignTransaction(
        params: P.CommonParams & Tezos.TezosSignTransaction,
    ): P.Response<Protobuf.TezosSignedTx>;
    /**
     * Challenge-response authentication via Trezor.
     * To protect against replay attacks you should use a server-side generated
     * and randomized challengeHidden for every attempt. You can also provide a
     * visual challenge that will be shown on the device.
     */
    function requestLogin(
        params: P.CommonParams & (Misc.RequestLoginAsync | Misc.LoginChallenge),
    ): P.Response<Misc.Login>;
    /**
     * Asks device to encrypt value using the private key derived by given BIP32
     * path and the given key. IV is always computed automatically.
     */
    function cipherKeyValue(params: P.CommonParams & Misc.CipherKeyValue): P.Response<Misc.CipheredValue>;
    function cipherKeyValue(
        params: P.CommonParams & P.Bundle<Misc.CipherKeyValue>,
    ): P.BundledResponse<Misc.CipheredValue>;
    /**
     * Retrieves the set of features associated with the device.
     */
    function getFeatures(params?: P.CommonParams): P.Response<Device.Features>;
    /**
     * Retrieves device state associated with passphrase.
     */
    function getDeviceState(params?: P.CommonParams): P.Response<Device.DeviceStateResponse>;
    /**
     * Resets device to factory defaults and removes all private data.
     */
    function wipeDevice(params?: P.CommonParams): P.Response<P.DefaultMessage>;
    /**
     * Performs device setup and generates a new seed.
     */
    function resetDevice(params: P.CommonParams & Mgmnt.ResetDevice): P.Response<P.DefaultMessage>;
    /**
     * Applies device setup
     */
    function applySettings(params: P.CommonParams & Mgmnt.ApplySettings): P.Response<P.DefaultMessage>;
    /**
     * Increment saved flag on device
     */
    function applyFlags(params: P.CommonParams & Mgmnt.ApplyFlags): P.Response<P.DefaultMessage>;
    /**
     * Change pin
     */
    function changePin(params: P.CommonParams & Mgmnt.ChangePin): P.Response<P.DefaultMessage>;
    /**
     * Sends FirmwareErase message followed by FirmwareUpdate message
     */
    function firmwareUpdate(
        params: P.CommonParams & (Mgmnt.FirmwareUpdate | Mgmnt.FirmwareUpdateBinary),
    ): P.Response<P.DefaultMessage>;
    /**
     * Asks device to initiate seed backup procedure
     */
    function backupDevice(params?: P.CommonParams): P.Response<P.DefaultMessage>;
    /**
     * reboot to bootloader
     */
    function bixinReboot(params?: P.CommonParams): P.Response<P.DefaultMessage>;
    /**
     * Ask device to initiate recovery procedure
     */
    function recoveryDevice(params: P.CommonParams & Mgmnt.RecoveryDevice): P.Response<P.DefaultMessage>;
    /**
     * Get static coin info
     */
    function getCoinInfo(params: CoinInfo.GetCoinInfo): P.Response<CoinInfo.CoinInfo>;
    // // Developer mode
    function customMessage(params: P.CommonParams & Misc.CustomMessage): P.Response<any>;
    function debugLinkDecision(params?: P.CommonParams): P.Response<{ debugLink: true }>;
    function debugLinkGetState(params?: P.CommonParams): P.Response<{ debugLink: true }>;
}
declare namespace CONSTANTS {
declare const CORE_EVENT = 'CORE_EVENT';
export const UI_EVENT = 'UI_EVENT';
export const DEVICE_EVENT = 'DEVICE_EVENT';
export const TRANSPORT_EVENT = 'TRANSPORT_EVENT';
export const RESPONSE_EVENT = 'RESPONSE_EVENT';
export const BLOCKCHAIN_EVENT = 'BLOCKCHAIN_EVENT';
export namespace BLOCKCHAIN {
    const CONNECT = 'blockchain-connect';
    const ERROR = 'blockchain-error';
    const NOTIFICATION = 'blockchain-notification';
    const BLOCK = 'blockchain-block';
    const FIAT_RATES_UPDATE = 'fiat-rates-update';
}
export namespace IFRAME {
    const BOOTSTRAP = 'iframe-bootstrap';
    const LOADED = 'iframe-loaded';
    const INIT = 'iframe-init';
    const ERROR = 'iframe-error';
    const CALL = 'iframe-call';
}
export namespace POPUP {
    // Message called from popup.html inline script before "window.onload" event. This is first message from popup to window.opener.
    const BOOTSTRAP = 'popup-bootstrap';
    // Message from popup.js to window.opener, called after "window.onload" event. This is second message from popup to window.opener.
    const LOADED = 'popup-loaded';
    // Message from window.opener to popup.js. Send settings to popup. This is first message from window.opener to popup.
    const INIT = 'popup-init';
    // Error message from popup to window.opener. Could be thrown during popup initialization process (POPUP.INIT)
    const ERROR = 'popup-error';
    // Message to webextensions, opens "trezor-usb-permission.html" within webextension
    const EXTENSION_USB_PERMISSIONS = 'open-usb-permissions';
    // Message called from both [popup > iframe] then [iframe > popup] in this exact order.
    // Firstly popup call iframe to resolve popup promise in Core
    // Then iframe reacts to POPUP.HANDSHAKE message and sends ConnectSettings, transport information and requested method details back to popup
    const HANDSHAKE = 'popup-handshake';
    // Event emitted from PopupManager at the end of popup closing process.
    // Sent from popup thru window.opener to an iframe because message channel between popup and iframe is no longer available
    const CLOSED = 'popup-closed';
    // Message called from iframe to popup, it means that popup will not be needed (example: Blockchain methods are not using popup at all)
    // This will close active popup window and/or clear opening process in PopupManager (maybe popup wasn't opened yet)
    const CANCEL_POPUP_REQUEST = 'ui-cancel-popup-request';
    // Message called from inline element in popup.html (window.closeWindow), this is used only with webextensions to properly handle popup close event
    const CLOSE_WINDOW = 'window.close';
}
export namespace TRANSPORT {
    const START = 'transport-start';
    const ERROR = 'transport-error';
    const UPDATE = 'transport-update';
    const STREAM = 'transport-stream';
    const REQUEST = 'transport-request_device';
    const RECONNECT = 'transport-reconnect';
    const DISABLE_WEBUSB = 'transport-disable_webusb';
    const START_PENDING = 'transport-start_pending';
}
export namespace DEVICE {
    // device list events
    const CONNECT = 'device-connect';
    const CONNECT_UNACQUIRED = 'device-connect_unacquired';
    const DISCONNECT = 'device-disconnect';
    const CHANGED = 'device-changed';
    const ACQUIRE = 'device-acquire';
    const RELEASE = 'device-release';
    const ACQUIRED = 'device-acquired';
    const RELEASED = 'device-released';
    const USED_ELSEWHERE = 'device-used_elsewhere';
    const LOADING = 'device-loading';
    // trezor-link events in protobuf format
    const BUTTON = 'button';
    const PIN = 'pin';
    const PASSPHRASE = 'passphrase';
    const PASSPHRASE_ON_DEVICE = 'passphrase_on_device';
    const WORD = 'word';
    // custom
    const WAIT_FOR_SELECTION = 'device-wait_for_selection';
    // this string has different prefix than other constants and it's used as device path
    const UNREADABLE = 'unreadable-device';
}
export namespace UI {
    const TRANSPORT = 'ui-no_transport';
    const BOOTLOADER = 'ui-device_bootloader_mode';
    const NOT_IN_BOOTLOADER = 'ui-device_not_in_bootloader_mode';
    const REQUIRE_MODE = 'ui-device_require_mode';
    const INITIALIZE = 'ui-device_not_initialized';
    const SEEDLESS = 'ui-device_seedless';
    const FIRMWARE_OLD = 'ui-device_firmware_old';
    const FIRMWARE_OUTDATED = 'ui-device_firmware_outdated';
    const FIRMWARE_NOT_SUPPORTED = 'ui-device_firmware_unsupported';
    const FIRMWARE_NOT_COMPATIBLE = 'ui-device_firmware_not_compatible';
    const FIRMWARE_NOT_INSTALLED = 'ui-device_firmware_not_installed';
    const FIRMWARE_PROGRESS = 'ui-firmware-progress';
    const DEVICE_NEEDS_BACKUP = 'ui-device_needs_backup';
    const REQUEST_UI_WINDOW = 'ui-request_window';
    const CLOSE_UI_WINDOW = 'ui-close_window';
    const REQUEST_PERMISSION = 'ui-request_permission';
    const REQUEST_CONFIRMATION = 'ui-request_confirmation';
    const REQUEST_PIN = 'ui-request_pin';
    const INVALID_PIN = 'ui-invalid_pin';
    const REQUEST_PASSPHRASE = 'ui-request_passphrase';
    const REQUEST_PASSPHRASE_ON_DEVICE = 'ui-request_passphrase_on_device';
    const INVALID_PASSPHRASE = 'ui-invalid_passphrase';
    const INVALID_PASSPHRASE_ACTION = 'ui-invalid_passphrase_action';
    const CONNECT = 'ui-connect';
    const LOADING = 'ui-loading';
    const SET_OPERATION = 'ui-set_operation';
    const SELECT_DEVICE = 'ui-select_device';
    const SELECT_ACCOUNT = 'ui-select_account';
    const SELECT_FEE = 'ui-select_fee';
    const UPDATE_CUSTOM_FEE = 'ui-update_custom_fee';
    const INSUFFICIENT_FUNDS = 'ui-insufficient_funds';
    const REQUEST_BUTTON = 'ui-button';
    const REQUEST_WORD = 'ui-request_word';
    const RECEIVE_PERMISSION = 'ui-receive_permission';
    const RECEIVE_CONFIRMATION = 'ui-receive_confirmation';
    const RECEIVE_PIN = 'ui-receive_pin';
    const RECEIVE_PASSPHRASE = 'ui-receive_passphrase';
    const RECEIVE_DEVICE = 'ui-receive_device';
    const CHANGE_ACCOUNT = 'ui-change_account';
    const RECEIVE_ACCOUNT = 'ui-receive_account';
    const RECEIVE_FEE = 'ui-receive_fee';
    const RECEIVE_WORD = 'ui-receive_word';
    const CHANGE_SETTINGS = 'ui-change_settings';
    const CUSTOM_MESSAGE_REQUEST = 'ui-custom_request';
    const CUSTOM_MESSAGE_RESPONSE = 'ui-custom_response';
    const LOGIN_CHALLENGE_REQUEST = 'ui-login_challenge_request';
    const LOGIN_CHALLENGE_RESPONSE = 'ui-login_challenge_response';
    const BUNDLE_PROGRESS = 'ui-bundle_progress';
    const ADDRESS_VALIDATION = 'ui-address_validation';
}
export namespace CARDANO {
    enum PROTOCOL_MAGICS {
        mainnet = 764824073,
        testnet = 42,
    }
    enum NETWORK_IDS {
        mainnet = 1,
        testnet = 0,
    }
    enum ADDRESS_TYPE {
        Base = 0,
        Pointer = 4,
        Enterprise = 6,
        Byron = 8,
        Reward = 14,
    }
    enum CERTIFICATE_TYPE {
        StakeRegistration = 0,
        StakeDeregistration = 1,
        StakeDelegation = 2,
        StakePoolRegistration = 3
    }
}

}declare namespace P {
declare interface Unsuccessful {
    success: false;
    payload: { error: string; code?: string };
}
export interface Success<T> {
    success: true;
    id: number;
    payload: T;
}
export type Response<T> = Promise<Success<T> | Unsuccessful>;
export type BundledResponse<T> = Promise<Success<T[]> | Unsuccessful>;
export interface DefaultMessage {
    message: string;
}
export interface Manifest {
    appUrl: string;
    email: string;
}
export interface ConnectSettings {
    manifest?: Manifest;
    connectSrc?: string;
    debug?: boolean;
    hostLabel?: string;
    hostIcon?: string;
    popup?: boolean;
    transportReconnect?: boolean;
    webusb?: boolean;
    pendingTransportEvent?: boolean;
    lazyLoad?: boolean;
    interactionTimeout?: number;
    // internal part, not to be accepted from .init()
    origin?: string;
    configSrc: string;
    iframeSrc: string;
    popupSrc: string;
    webusbSrc: string;
    version: string;
    priority: number;
    trustedHost: boolean;
    supportedBrowser?: boolean;
    extension?: string;
    env: 'node' | 'web' | 'webextension' | 'electron' | 'react-native';
    timestamp: number;
}
export interface CommonParams {
    device?: {
        path: string;
        state?: string;
        instance?: number;
    };
    useEmptyPassphrase?: boolean;
    allowSeedlessDevice?: boolean;
    keepSession?: boolean;
    skipFinalReload?: boolean;
}
export interface Bundle<T> {
    bundle: T[];
}

}declare namespace Misc {
declare interface CipherKeyValue {
    path: string | number[];
    key?: string;
    value?: string  | Buffer;
    encrypt?: boolean;
    askOnEncrypt?: boolean;
    askOnDecrypt?: boolean;
    iv?: string;
}
export interface CipheredValue {
    value: string;
}
export interface LoginChallenge {
    challengeHidden: string;
    challengeVisual: string;
}
export interface RequestLoginAsync {
    callback: () => LoginChallenge;
}
export interface Login {
    address: string;
    publicKey: string;
    signature: string;
}
export interface CustomMessage {
    messages?: JSON | object;
    message: string;
    params: JSON | object;
    callback: (request: any) => Promise<{ message: string; params?: object }>;
}

}