"use strict";(self.webpackChunkonekey_document=self.webpackChunkonekey_document||[]).push([[5258],{9915:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return a},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var o=t(7462),i=t(3366),s=(t(7294),t(3905)),c=["components"],r={sidebar_position:2},a="Handling events",d={unversionedId:"Connect/Events",id:"Connect/Events",isDocsHomePage:!1,title:"Handling events",description:"Once user grants permission for hosting page to communicate with API OneKeyConnect will emits events",source:"@site/docs/Connect/Events.mdx",sourceDirName:"Connect",slug:"/Connect/Events",permalink:"/en/Connect/Events",editUrl:"https://github.com/onekeyhq/documents/edit/main/docs/Connect/Events.mdx",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"ConnectSidebar",previous:{title:"Getting Started",permalink:"/en/Connect/getting-started"},next:{title:"Methods",permalink:"/en/Connect/Methods"}},l=[{value:"List of published events",id:"list-of-published-events",children:[]}],p={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,c);return(0,s.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"handling-events"},"Handling events"),(0,s.kt)("p",null,'Once user grants permission for hosting page to communicate with API OneKeyConnect will emits events\nabout device state.\nEvents can be distinguished by "type" field of event object.\nConstants of all types can be imported from package.'),(0,s.kt)("p",null,"ES6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import OneKeyConnect, { DEVICE_EVENT, DEVICE } from '@onekeyfe/connect';\n\nOneKeyConnect.on(DEVICE_EVENT, (event) => {\n    if (event.type === DEVICE.CONNECT) {\n\n    } else if (event.type === DEVICE.DISCONNECT) {\n\n    }\n});\n")),(0,s.kt)("p",null,"CommonJS"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"var OneKeyConnect = require('@onekeyfe/connect').default;\nvar DEVICE_EVENT = require('@onekeyfe/connect').DEVICE_EVENT;\nvar DEVICE = require('@onekeyfe/connect').DEVICE;\n\nOneKeyConnect.on(DEVICE_EVENT, (event) => {\n    if (event.type === DEVICE.CONNECT) {\n\n    } else if (event.type === DEVICE.DISCONNECT) {\n\n    }\n});\n")),(0,s.kt)("h2",{id:"list-of-published-events"},"List of published events"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"device-connect"),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"device-disconnect"),"\n",(0,s.kt)("inlineCode",{parentName:"p"},"device-changed")))}u.isMDXComponent=!0}}]);